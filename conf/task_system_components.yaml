c4_component_diagram:
  description: >
    Write a PlantUML diagram for the C4 System Component level based on the JSON metadata of the {language} source code base. 
    The diagram should strictly adhere to the elements defined in the C4 System Context model.

    Clarify that the "system" referenced in the diagram is the one identified in the code base metadata. Internal components
    of the system need not be detailed since the diagram focuses on interactions with external systems and users.

  expected_output: >
    A well-formatted PlantUML diagram that represents the C4 System Component level diagram.
    The diagram should:
    - Scope the system boundary to bounded contexts.
    - It should focus on components that implements the bounded contexts.
    - Clearly represent the interactions between the components.
    - Give a name to the component

    Example C4 System Component diagram in PlantUML:
    @startuml
    set separator none
    title Internet Banking System - [Component Name]

    top to bottom direction

    !include <C4/C4>
    !include <C4/C4_Context>
    !include <C4/C4_Container>
    !include <C4/C4_Component>

    System(MainframeBankingSystem, "Mainframe Banking System", $descr="Stores all of the core banking information about customers, accounts, transactions, etc.", $tags="", $link="")
    System(EmailSystem, "E-mail System", $descr="The internal Microsoft Exchange e-mail system.", $tags="", $link="")
    Container(InternetBankingSystem.SinglePageApplication, "Single-Page Application", $techn="JavaScript and Angular", $descr="Provides all of the Internet banking functionality to customers via their web browser.", $tags="", $link="")
    Container(InternetBankingSystem.MobileApp, "Mobile App", $techn="Xamarin", $descr="Provides a limited subset of the Internet banking functionality to customers via their mobile device.", $tags="", $link="")
    ContainerDb(InternetBankingSystem.Database, "Database", $techn="Oracle Database Schema", $descr="Stores user registration information, hashed authentication credentials, access logs, etc.", $tags="", $link="")

    Container_Boundary("InternetBankingSystem.APIApplication_boundary", "API Application", $tags="") {
      Component(InternetBankingSystem.APIApplication.SignInController, "Sign In Controller", $techn="Spring MVC Rest Controller", $descr="Allows users to sign in to the Internet Banking System.", $tags="", $link="")
      Component(InternetBankingSystem.APIApplication.AccountsSummaryController, "Accounts Summary Controller", $techn="Spring MVC Rest Controller", $descr="Provides customers with a summary of their bank accounts.", $tags="", $link="")
      Component(InternetBankingSystem.APIApplication.ResetPasswordController, "Reset Password Controller", $techn="Spring MVC Rest Controller", $descr="Allows users to reset their passwords with a single use URL.", $tags="", $link="")
      Component(InternetBankingSystem.APIApplication.SecurityComponent, "Security Component", $techn="Spring Bean", $descr="Provides functionality related to signing in, changing passwords, etc.", $tags="", $link="")
      Component(InternetBankingSystem.APIApplication.MainframeBankingSystemFacade, "Mainframe Banking System Facade", $techn="Spring Bean", $descr="A facade onto the mainframe banking system.", $tags="", $link="")
      Component(InternetBankingSystem.APIApplication.EmailComponent, "E-mail Component", $techn="Spring Bean", $descr="Sends e-mails to users.", $tags="", $link="")
    }

    Rel(InternetBankingSystem.SinglePageApplication, InternetBankingSystem.APIApplication.SignInController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.SinglePageApplication, InternetBankingSystem.APIApplication.AccountsSummaryController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.SinglePageApplication, InternetBankingSystem.APIApplication.ResetPasswordController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.MobileApp, InternetBankingSystem.APIApplication.SignInController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.MobileApp, InternetBankingSystem.APIApplication.AccountsSummaryController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.MobileApp, InternetBankingSystem.APIApplication.ResetPasswordController, "Makes API calls to", $techn="JSON/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.SignInController, InternetBankingSystem.APIApplication.SecurityComponent, "Uses", $techn="", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.AccountsSummaryController, InternetBankingSystem.APIApplication.MainframeBankingSystemFacade, "Uses", $techn="", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.ResetPasswordController, InternetBankingSystem.APIApplication.SecurityComponent, "Uses", $techn="", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.ResetPasswordController, InternetBankingSystem.APIApplication.EmailComponent, "Uses", $techn="", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.SecurityComponent, InternetBankingSystem.Database, "Reads from and writes to", $techn="SQL/TCP", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.MainframeBankingSystemFacade, MainframeBankingSystem, "Makes API calls to", $techn="XML/HTTPS", $tags="", $link="")
    Rel(InternetBankingSystem.APIApplication.EmailComponent, EmailSystem, "Sends e-mail using", $techn="", $tags="", $link="")

    SHOW_LEGEND(true)
    @enduml

    metadata.json:
    {meta_data_json}

  agent_role: Documentation_Specialist

export_c4_component_diagram:
  description: >
    Send the text definition of the PlantUML diagram to tool to export it as a PNG image.
    Make that the PlantUML diagram defintion starts with the `@startuml` tag and ends with the `@enduml` tag.

  expected_output: >
    1. Get confirmation that the PlantUML diagram was successfully exported as a PNG image.

  agent_role: Tool_Specialist

  tools:
    - plantuml_export

  context:
    - c4_component_diagram

component_documentation:
  description: >
    Analyze the component metadata and diagram information from the previous tasks to produce a comprehensive about component in context.
    
    metadata.json:
    {meta_data_json}

  expected_output: >
    A well-structured document that include:
    1. **Component Overview [Component Name]**: A high-level summary of the component purpose and structure.
    2. **Component Diagram**: A link to the exported component diagram image (e.g., "c4_component_{component_id}.png") for visualization.
    3. **Interactions**: An explanation of how the component interacts with other components and external systems.

  agent_role: Documentation_Specialist

  context:
    - c4_component_diagram